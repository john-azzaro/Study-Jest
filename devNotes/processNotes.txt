Process Notes for Jest Study
=================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.





How to create a Jest test
=========================

1. In your src file, create a program file and within that, create a index.js file.
  --------------------------------------------
    src    >   myProgramFile  >  index.js
              _______________    _________
  --------------------------------------------

2. Create a test file for the test code.
  * Note here that Jest will automatically look for files with ".test.js" or ".spec.js" and run those files.
  --------------------------------------------
    src   >   myProgramFile  >  index.test.js 
                                ______________
  --------------------------------------------

3. Add your function/component to index.js:
  ------------------------------------------------------------------- 
    function leapYear(year) {                                          // This function takes a year as its input...
      if(year < 1582) {                                                // If the year is less than 1582, then it is an error.
        throw new Error('Leap year rules do not work before 1582');
      }
      const div400 = year % 400 === 0;            
      const div100 = year % 100 === 0;
      const div4 = year % 4 === 0;
      return div400 || (div4 || !div100);                              // if the year is equal to the value of one of the variables, then it is correct.
    } 

  export default leapYear;                                             // remember to export the function/component so it is accessible to other JavaScript modules and test.
  ------------------------------------------------------------------

4. Create your first test:
  * A test function has a straight forward syntax.
  * The description should be clear and unambiguous as it will help describe and identify the test.
  * Use "it" function to invoke Jest.
  * The "it" function takes TWO parameters... a description of the test and the function itself.
  * In the body, you can perform test that can test code, including expected inputs, expected outputs, and actual outputs.
  * 
    ------------------------------------------------------------------
      it('Put test description here', function() {                      // The "it" function is invoked by Jest and takes two parameters... the describing test and the function itself.
         const input = 1900                                             // tested input (e.g. the year 1900 which is not a leap year).
         const expectedOutput = false;                                  // the expected output from this test is false.
         const actualOutput = leapYear(input)                           // the actual output is the leapYear function wth the input of 1900 passed to it.
         expect(actualOutput).toBe(expectedOutput);                     //
      });
    ------------------------------------------------------------------

  * The test function above invokes the function to be tested with the input for for which you know the output and then compared the actual output to the expected output.
  * If it matches, the test will pass.
  * If it does not match, then the test will fail.




  ---------------------------------------------------------------------
  import leapYear  from './index';                                                   //  Import the function/component from index.js.

  it('should NOT be a leap year if divisible by 100, not 400', function() {         
    const input = 1900;
    const expectedOutput = false; 
    expect(leapYear(input)).toBe(expectedOutput);
  });
  ---------------------------------------------------------------------