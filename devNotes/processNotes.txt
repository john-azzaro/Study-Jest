Process Notes for Jest Study
=================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.





How to create a Jest test
=========================

1. In your src file, create a program file and within that, create a index.js file.
  --------------------------------------------
    src    >   myProgramFile  >  index.js
              _______________    _________
  --------------------------------------------

2. Create a test file for the test code.
  * Note here that Jest will automatically look for files with ".test.js" or ".spec.js" and run those files.
  --------------------------------------------
    src   >   myProgramFile  >  index.test.js 
                                ______________
  --------------------------------------------

3. Add your function/component to index.js:
  ------------------------------------------------------------------- 
    function leapYear(year) {                                          // This function takes a year as its input...
      if(year < 1582) {                                                // If the year is less than 1582, then it is an error.
        throw new Error('Leap year rules do not work before 1582');
      }
      const div400 = year % 400 === 0;            
      const div100 = year % 100 === 0;
      const div4 = year % 4 === 0;
      return div400 || (div4 || !div100);                              // if the year is equal to the value of one of the variables, then it is correct.
    } 

  export default leapYear;                                             // remember to export the function/component so it is accessible to other JavaScript modules and test.
  ------------------------------------------------------------------

4. Create your first test:
  * A test function has a straight forward syntax.
  * The description should be clear and unambiguous as it will help describe and identify the test.
  * Use "it" function to invoke Jest.
  * The "it" function takes TWO parameters... a description of the test and the function itself.
  * In the body, you can perform test that can test code, including expected inputs, expected outputs, and actual outputs.
  * At the end of your test, you need to use "expect" which essentially says "when you run this code, expect X".
  * In Jest, the "expect" function provides "matchers" like ".toBe" to check the input: https://jestjs.io/docs/en/using-matchers
  * The test function above invokes the function to be tested with the input for for which you know the output and then compared the actual output to the expected output.
  * If it matches, the test will pass.
  * If it does not match, then the test will fail.
    ------------------------------------------------------------------
      import leapYear  from './index';                                  //  Import the function/component from index.js.
      
      it('This is the test description', function() {                   // The "it" function is invoked by Jest and takes two parameters... the describing test and the function itself.
         const input = 1900                                             // tested input (e.g. the year 1900 which is not a leap year).
         const expectedOutput = false;                                  // the expected output from this test is false.
         const actualOutput = leapYear(input)                           // the actual output is the leapYear function wth the input of 1900 passed to it.
         expect(actualOutput).toBe(expectedOutput);                     // The definitive result of leapYear(1900) is expected to be FALSE... which should pass the test.
      });
    ------------------------------------------------------------------

  * The method of testing is up to you as you can simplify the tests depending on what your preference is. 
  * For example, you could write short "it" functions for each and every test you want.
  * Each test case is defined.
  * Note that the last one that throws an error requires a different expect matcher, specifically the ".toThrow"
  ---------------------------------------------------------------------------------------
      it('should NOT be a leap year if divisible by 100, not 400', function() {                    //
        expect(leapYear(1900)).toBe(false);
      });

      it('should be a leap year if divisible by 4, not 100', function() {
        expect(leapYear(1984)).toBe(true);
      });

      it('should NOT be a leap year if not divisible by 4', function() {
        expect(leapYear(1983)).toBe(false);
      });

      it('should be a leap year if divisible by 400', function() {
        expect(leapYear(2000)).toBe(true);
      });

      it('should throw an error for years before 1582', function() {
        expect(function() => {
          leapYear(1568);
        }).toThrow();
});
  ---------------------------------------------------------------------------------------





5. Run test!
  * Note that when you run the tests, it will continue to watch for changes, so you can chnage or modify your code 
    and the tests will automatically run again.
  ------------------------------------------------------------------
    FAIL src/leapyearprogram/index.test.js
      × should NOT be a leap year if divisible by 100, not 400 (6ms)              // name of the test (this is why you have a good, unambiguous descriptive description). Also good for id if multiple tests.

      ● should NOT be a leap year if divisible by 100, not 400

        expect(received).toBe(expected) // Object.is equality                     // the test itself, comparing two 2 values for equality.

        Expected: false                                                           // We expect the value of the test to be FALSE...
        Received: true                                                            // ... but the value returns TRUE.

          4 |   const input = 1900;
          5 |   const expectedOutput = false;
        > 6 |   expect(leapYear(input)).toBe(expectedOutput);                     // And the point of failure for the test occurs here.
            |                           ^
          7 | });

          at Object.<anonymous>.it (src/leapyearprogram/index.test.js:6:27)

    Test Suites: 1 failed, 1 total                                                 // Lastly, a general summary of the tests which pass, fail, etc.
    Tests:       1 failed, 1 total
    Snapshots:   0 total
    Time:        1.952s, estimated 2s
    Ran all test suites related to changed files.

  ------------------------------------------------------------------

  In this case, the error occured because we used an "or" operator instead of a "and" operator
    -----------------------------------------------------------------
       return div400 || (div4 || !div100);                             // WRONG
       return div400 || (div4 && !div100);                             // CORRECT
    -----------------------------------------------------------------

When you correct this error, the test should pass!
    ----------------------------------------------------------------------
    PASS src/leapyearprogram/index.test.js
      √ should NOT be a leap year if divisible by 100, not 400 (4ms)

    Test Suites: 1 passed, 1 total                                            // One test suit (index.test.js)
    Tests:       1 passed, 1 total                                            // One test.
    Snapshots:   0 total
    Time:        1.932s, estimated 2s
    Ran all test suites related to changed files.

    ----------------------------------------------------------------------




How do you create more than one test?
======================================
  * To add another test case, you simply create another "it" function, a description of the test and the function itself.. basically a rehash of step 4 above.
  ---------------------------------------------------------------------------------------
    import leapYear  from './index';

    it('should NOT be a leap year if divisible by 100, not 400', function() {            // First test
      const input = 1900;
      const expectedOutput = false; 
      expect(leapYear(input)).toBe(expectedOutput);
    });

    it('should be a leap year if divisible by 4, not 100', function() {                    // Second test
      const input = 1984;
      const expectedOutput = true;
      const actualOutput = leapYear(input);
      expect(actualOutput).toBe(expectedOutput);
    });
  ---------------------------------------------------------------------------------------

  And when you see the test output, you will see a second test pass.
  ----------------------------------------------------------------------------------------
    PASS src/leapyearprogram/index.test.js
      √ should NOT be a leap year if divisible by 100, not 400 (3ms)
      √ should be a leap year if divisible by 4, not 100

    Test Suites: 1 passed, 1 total                                                          // One test suit (index.test.js)
    Tests:       2 passed, 2 total                                                          // Two tests.
    Snapshots:   0 total
    Time:        2.496s
    Ran all test suites related to changed files.

  ----------------------------------------------------------------------------------------





  How do you test React Components with Jest?
  ==========================================
  * A React component represents a single unit of code built to accomplish a single task.
  * Testing components ensures that they behave as expected.
  * Components are just like JavaScript code, so testing them is simply an extension of testing JavaScript functions.
  * However, React components differe in a few ways:
    * When A react component is mounted on a browsers DOM when it is rendered so the component needs to be tested to work in that kind of environment.
    * Since React is concerned with the "view" layer of the UI, you want to make sure no unexpected changes happen to the UI.
  * React components can be simple or complex, so tests should cover every aspect of the components behavior including props, user events, and rendering.

  ---
  Objectives -- 
      * first test that ensures component renders to beging with (useful as a base to build on when your component heirarchy grows such as when a nested component breaks).
         * Testing deeply nested components is refered to as a "smoke test".
      * Second, "snapshot testing" compares the UI to a saved version  of the UI and informs you is the UI changed at all.
        * If you did not intend to change the UI
  


  How do you create a smoke test?
  ===============================
  1. First, look for the App.test.js. 
  * This is the test file for App.js.
    -------------------------------------------------------------------------
      import React from 'react';                                                 // make React available

      import ReactDOM from 'react-dom';                                          // make the ReactDOM available, necessary for rendering the component

      import App from './App';                                                   // make the App component available

      it('renders without crashing', function() {                                // this is the test case
        const div = document.createElement('div');                               // first create a DOM element to render the component into
        ReactDOM.render(<App />, div);                                           // render the component, this is the actual test, if something is wrong it will fail here

        
        ReactDOM.unmountComponentAtNode(div);                                    // clean up code
      });
    -------------------------------------------------------------------------